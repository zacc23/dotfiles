#!/bin/sh
PS1=[$'\e[34;1m$(id -un)'"@$(hostname)"\ '$(pwd | sed "s,^$HOME,~,")'$'\e[0m'"]$(
	if (( USER_ID )); then print \$; else print \#; fi) "

# aliases
alias acp='scp -P 8022'
alias as='alsactl --file ~/.config/asound.state store'
alias am=alsamixer
alias archive="git --git-dir=$HOME/.archives/ --work-tree=$HOME"
alias ash='ssh -p 8022'
alias bc='bc -ql'
alias bluempg='mpg123 -abluealsa -f500'
alias blueplay='aplay -D bluealsa'
alias bvol='amixer -D bluealsa sset "$BLUEALSA_DEV"'
alias cemu='$SRC_DIR/CEmu/gui/qt/CEmu'
alias cm='curl -s https://wttr.in/moon | head -n23' # | less -FKRSX
alias cmake='cmake -Wno-dev' #-DCMAKE_BUILD_TYPE=Release
alias cmakerm='xargs rm < install_manifest.txt'
alias config='git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME'
alias curl='curl -s --show-error'
alias cw='curl -s https://v2.wttr.in/phf | head -n42' # | less -FKRSX
alias deemix='deemix -b flac -p .'
alias den='dolphin-emu-nogui'
alias diff='diff --color'
alias doas='doas '
alias doom=crispy-doom
alias dos2unix='dos2unix -q'
alias dt='dict -d wn' # dt='dict -d pgw'
alias dwdiff='dwdiff -3 -c'
alias feh='feh -R 0' # -B black
alias fetch='fdm -kv fetch'
alias ffmpeg='ffmpeg -hide_banner'
alias ffprobe='ffprobe -hide_banner'
alias fl=figlet
# rtbufsize: https://ru.stackoverflow.com/a/640591
alias ffplay='ffplay -rtbufsize 8192 -af "aresample=out_channel_layout=stereo" -autoexit -hide_banner -v 8 -stats'
alias fxname='basename $(ll /proc/$(xprop _NET_WM_PID | awk "{print \$NF}")/exe | awk "{print \$NF}")'
alias gdb='gdb -q'
alias gimp='gimp -s'
alias hc=HeadsetControl
#alias killgpg='gpg-connect-agent reloadagent /bye'
alias la='ls -A'
alias less='less --mouse'
alias ll='ls -l'
alias ls='ls --color=auto'
#alias fw='httpdirfs "https://open.audio" ~/.local/music'
alias maxima='maxima -q'
alias make='make -j$(nproc)'
alias makepdf='libreoffice --convert-to pdf'
alias mailx=mail
alias mci='make clean install'
alias metaflac-dump='metaflac --export-tags-to -'
alias mullvad='curl https://am.i.mullvad.net/connected'
alias nf=neofetch
alias octave='octave --silent'
alias osu='dotnet run --project $SRC_DIR/osu/osu.Desktop -c Release'
alias pdf=mupdf
alias pf=pfetch
alias pl='pacmd list-sinks | grep -e "name:" -e "index:" -e "base volume:"'
alias pm=pulsemixer
alias pg="$PAGER"
alias pi='print "scale=10; 4*a(1)" | bc -l'
alias pwpass='pw | pass insert -m'
alias rec='ffmpeg -video_size 1920x1080 -framerate 60 -f x11grab -i $DISPLAY'
alias root='root -l'
alias scrot='scrot %Y-%m-%d-%T-screenshot.png'
alias sfu=sfeed_update
alias sudo=doas
alias sx=startx
alias tb='nc termbin.com 9999'
alias th='dict -d moby-thesaurus' # th='dict -d roget'
alias tmux='tmux -2'
alias tl='trans -b -no-autocorrect'
alias updatetcsv='curl -sf "https://git.torrents-csv.ml/heretic/torrents-csv-data/raw/branch/main/torrents.csv" > ~/.local/torrents.csv'
alias wdiff=dwdiff
alias whereami='curl https://ipinfo.io/8.8.8.8/loc'
alias wr='curl "https://wttr.in/phf?format="%l:+%c+%C+%t""; echo'
alias wtf='netbsd-wtf -o'
alias wtfubar='wtfubar -o'
alias yt-dlp='yt-dlp -i' 
alias z='zzz >/dev/null'

# functions
0x0() {
	curl -F'file=@'"$1" https://0x0.st
}

2sf() {
	song="$1"
	shift	
	2sftowav "$song" /dev/stdout 2>/dev/null | $APLAY -r 44100 -i - "$@" 
}

atmp() { # youtube audio links expire after some time, might rm because too complicated 
        url="$1"
        shift
        dir="$VID_DIR"
        aud="$(yt-dlp --restrict-filenames -x -e "$url")" # causes issues if 's' is in the filename
	fmt="$(yt-dlp -x -F "$url" | grep 'audio only' | awk '{print $2}' | tail -n1)" 
        mkdir -p "$dir"
        [ ! -f "$dir"/"$aud"."$fmt" ] && yt-dlp --restrict-filenames -x "$url" -o "$dir"/"$aud"."$fmt"
        ffplay -nodisp "$dir"/"$aud"."$fmt" "$@"
}

blueopus() {
	opusdec --quiet "$1" - | aplay -D bluealsa -
}

c() { 
	printf "%s\n" "$*" | bc 
}

caud() {
	vid="$1"
	shift
	ffplay -nodisp "$@" "$(yt-dlp -g -x "$vid")"
}

cvid() {
        vid="$1"
        shift
        ffplay "$@" "$(yt-dlp -g -f best "$vid")"
}

dec() {
        openssl enc -aes-256-cbc -pbkdf2 -f -in "$1" 
}

decdir() {
	openssl enc -aes-256-cbc -pbkdf2 -d -in "$1" | tar xz
}

doc() {
	catdoc "$1" | $PAGER
}
 
docx() {
	docx2txt "$1" - | $PAGER
}

enc() {
	openssl enc -aes-256-cbc -pbkdf2 "$1" -out "$1".dat && srm "$1"
}
 
encdir() {
	tar cz "$1" | openssl enc -aes-256-cbc -pbkdf2 -out "$1".tar.gz.dat && srm -r "$1"
}

epub() {
	epub2txt "$1" | $PAGER
}

ew() { # edit which 
	"$EDITOR" $(which "$1")
}

hex() {
        strings "$1" | $PAGER
}

ips() {
	ip addr show "${1:-wlan0}" | grep 'inet ' | awk '{print $2}' | cut -f1 -d'/'
}

lac() {
	song="$1"
        shift
	flac -s -d "$song" -c | $APLAY -r 44100 -i - "$@"
}

lcase() { # haven't tested, from https://www.tecmint.com/rename-all-files-and-directory-names-to-lowercase-in-linux/
	find "$1" -depth | xargs -n 1 rename -v 's/(.*)\/([^\/]*)/$1\/\L$2/' {} \;
}

lowercase() { # possible solution from https://stackoverflow.com/a/25590300
        zip -0 -r "$1".zip "$1"
        unzip -LL "$1".zip
}

lst() { # last file(s)
	ls -c --color "${2:-.}" | sed "$1"q
}

m4a() {
        song="$1"
        shift
        faad -q -w "$song" | $APLAY -i - "$@"
}

mad() {
	lowdown -Tman "$1" | mandoc | $PAGER
}

md() { 
	markdown "$1" | w3m -T text/html | $PAGER
}

mid() {
	song="$1"
        shift
	fluidsynth -i -n -T raw -F- "$SF2" "$song" 2>/dev/null | $APLAY "$@"
}

conv_mono() {
	ffmpeg -i "$1" -ac 1 /tmp/"$1" && mv /tmp/"$1" .
}

mp3() {
	song="$1"
        shift
	mpg123 -q -s "$song" | $APLAY -r 44100 -i - "$@"	
}

physexec() { 
	\sudo -E ip netns exec eth0 \sudo-E -u \#$(id -u) -g \#$(id -g) "$@"; 
}

o() {
        printf "%s\n" "$*" | octave
}

odt() {
	odt2txt "$1" | $PAGER
}

ogg() {
	song="$1"
        shift
        oggdec -Q "$song" -o - | $APLAY -i - "$@"
}

opus() {
	song="$1"
	shift
	opusdec --quiet "$song" - | $APLAY -i - "$@" 
}

pod() {
	pod2mdoc "$1" | mandoc | $PAGER
}

pw() {
	< /dev/urandom tr -cd "[:print:]" | head -c 16; print 
}

qemu() {
	qemu-system-x86_64 -machine kernel_irqchip=off -boot d -enable-kvm \
	-smp 2,sockets=1,cores=2,threads=1 -m 8192 -cdrom "$1" \
	-display sdl
}

rst() {
	rst2man "$1" | mandoc | $PAGER
}

sfc() {
	sfeed_curses ~/.sfeed/feeds/${1:-*}
}

sfeed_youtube() {
	curl -s -L "https://www.youtube.com/user/"$1"/videos" | sfeed_web | cut -f 1
}

sfp() { 
	sfeed_plain ~/.sfeed/feeds/"$1" | $PAGER
}

shorten() {
	curl -F shorten="$1" https://0x0.st
}

sortsize() {
	du -sh -- "$@" | sort -hr
}

spc() {
	play_spc "$1" /dev/stdout | $APLAY -r 32000 -i -
}

tget() { # for twitch videos and other m3u streams
	url="$1"
        shift
        dir="$VID_DIR"
        fmt=mkv
        vid="$(yt-dlp --restrict-filenames -e "$url")"
        mkdir -p "$dir"
        [ ! -f "$dir"/"$vid"."$fmt" ] && ffmpeg -i $(yt-dlp -g "$url") -c copy "$@" "$dir"/"$vid"."$fmt" 
}
	 
torrent() { # yoinked from https://gitlab.com/dessalines/torrents.csv
	url="https://git.torrents-csv.ml/heretic/torrents-csv-data/raw/branch/main/torrents.csv"
	dir=~/.local
	file=torrents.csv
	[ ! -f "$dir"/"$file" ] && curl -sf "$url" > "$dir"/"$file"
	 grep -i ${1// /.*} "$dir"/"$file" | sort -t ',' -k 5 -g | while read -r line; do
	 infohash=$(echo -e "$line" | cut -d ',' -f1)
	 magnet_link="magnet:?xt=urn:btih:$infohash"
  	 name=$(echo -e "$line" | cut -d ',' -f2)
  	 size_bytes=$(echo -e "$line" | cut -d ',' -f3)
  	 seeders=$(echo -e "$line" | cut -d ',' -f5)
  	 size=$(numfmt --to=iec-i --suffix=B $size_bytes)
  	 # Construct the search result
  	 result="$name\n\tseeders: $seeders\n\tsize: $size\n\tlink: $magnet_link"
  	 echo -e "$result"
	done
}

tts() {
	url="$1"
        shift
        dir=~/videos/tmp
        vid="$(yt-dlp --get-filename --restrict-filenames "$url")"
        mkdir -p "$dir"
        [ ! -f "$dir"/"$vid" ] && yt-dlp "$url" -o "$dir"/"$vid"
        ffplay "$dir"/"$vid" "$@"
}

upload() {
	#curl -T "$1" https://oshi.at/"$(basename "$1")"/129600 
	curl -F'file=@'"$1" https://0x0.st
}

usf() {
	lazyusf --playback "$1" >/dev/null
}

video() {
	ffmpeg -re -i "$1" -f v4l2 /dev/video0	
}

vget() {
	url="$1"	
	shift
	dir="$VID_DIR"
	format=mkv
	vid="$(yt-dlp --restrict-filenames -e "$url")"
	mkdir -p "$dir"
	[ ! -f "$dir"/"$vid"."$format" ] && yt-dlp --restrict-filenames "$url" "$@" --merge-output-format "$format" --recode-video "$format" -o "$dir"/"$vid"   
}

vmdk() { # yoinked from https://foswiki.org/Support/HowToRunVirtualMachineImageOnKvmQemu
	qemu-system-x86_64 -enable-kvm -smp 2,sockets=1,cores=2,threads=1 -m 8192 \ 
	-hda "$1" -display sdl -boot once=c,menu=off  
}

vtmp() { # youtube video links expire after some time
        url="$1"
        shift
        dir="$VID_DIR"
        fmt=mkv
        vid="$(yt-dlp --restrict-filenames -e "$url")" # causes issues if 's' is in the filename
        mkdir -p "$dir"
        [ ! -f "$dir"/"$vid"."$fmt" ] && yt-dlp --restrict-filenames "$url" --merge-output-format "$fmt" --recode-video "$fmt" -o "$dir"/"$vid"
        ffplay "$dir"/"$vid"."$fmt" "$@"
}

w3mimg() { 
	w3m -o imgdisplay=/usr/lib/w3m/w3mimgdisplay "$1" 
}

w3mimgdisplay() {
	/usr/lib/w3m/w3mimgdisplay <<<$'0;1;100;100;100;100;;;;;"$1"\n4;\n3;i' 
}

wm() { 
	print "$1" | wc -m 
}

ww() { 
	print "$1" | wc -w 
}

youtubeConvert(){ # yoinked from https://gist.github.com/hightemp/11067566
        ffmpeg -i "$1" -c:v libx264 -crf 18 -preset slow -pix_fmt yuv420p -c:a copy "$2".mkv
}

yts() {
	yt-dlp -j "ytsearch$2:${1:-1}" | jq -M -r '"[" + .uploader + "] " + .title, "https://youtube.com/watch?v=" + .id'
}
